digraph "classes_brel_filing" {
rankdir=BT
charset="utf-8"
// "brel.reportelements.abstract.Abstract" [color="black", fontcolor="black", label=<{Abstract|<br ALIGN="LEFT"/>|get_labels(): list[BrelLabel]<br ALIGN="LEFT"/>get_name(): QName<br ALIGN="LEFT"/>}>, shape="record", style="solid"];

"brel.characteristics.brel_aspect.Aspect" [color="black", fontcolor="black", label=<{
Aspect
|
CONCEPT : str<br ALIGN="LEFT"/>
ENTITY : str<br ALIGN="LEFT"/>
PERIOD : str<br ALIGN="LEFT"/>
UNIT : str<br ALIGN="LEFT"/>
|
get_name(): str<br ALIGN="LEFT"/>
get_labels(): list[BrelLabel]<br ALIGN="LEFT"/>
is_core(): bool<br ALIGN="LEFT"/>
}>, 
shape="record", style="solid"];
// "brel.resource.brel_label.BrelLabel" [color="black", fontcolor="black", label=<{BrelLabel|STANDARD_LABEL_ROLE : str<br ALIGN="LEFT"/>|from_xml(xml_element: lxml.etree._Element, qname_nsmap: QNameNSMap): 'BrelLabel'<br ALIGN="LEFT"/>get_content(): dict<br ALIGN="LEFT"/>get_label(): str<br ALIGN="LEFT"/>get_label_role(): str<br ALIGN="LEFT"/>get_language(): str<br ALIGN="LEFT"/>get_role(): str<br ALIGN="LEFT"/>get_title(): str \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
// // // uncomment from here

"brel.brel_component.Component" [color="black", fontcolor="black", label=<{
Component
|
<br ALIGN="LEFT"/>
|
get_URI(): str<br ALIGN="LEFT"/>
get_info(): str<br ALIGN="LEFT"/>
get_calculation_network(): CalculationNetwork \| None<br ALIGN="LEFT"/>
get_definition_network(): DefinitionNetwork \| None<br ALIGN="LEFT"/>
get_presentation_network(): PresentationNetwork \| None<br ALIGN="LEFT"/>
|
Helper functions:<br/>
is_aggregation_consistent(facts: list[Fact]): bool<br ALIGN="LEFT"/>
}>, shape="record", style="solid"];
// "brel.reportelements.concept.Concept" [color="black", fontcolor="black", label=<{Concept|<br ALIGN="LEFT"/>|get_balance_type(): str \| None<br ALIGN="LEFT"/>get_data_type(): str<br ALIGN="LEFT"/>get_labels(): list[BrelLabel]<br ALIGN="LEFT"/>get_name(): QName<br ALIGN="LEFT"/>get_period_type(): str<br ALIGN="LEFT"/>is_nillable(): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
// "brel.characteristics.concept_characteristic.ConceptCharacteristic" [color="black", fontcolor="black", label=<{ConceptCharacteristic|<br ALIGN="LEFT"/>|get_aspect(): Aspect<br ALIGN="LEFT"/>get_value(): Concept<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"brel.brel_context.Context" [color="black", fontcolor="black", label=<{
Context
|
<br ALIGN="LEFT"/>
|
get_aspects(): list[Aspect]<br ALIGN="LEFT"/>
get_characteristic(aspect: Aspect): ICharacteristic \| None<br ALIGN="LEFT"/>
|
Helper functions:<br/>
get_concept(): ConceptCharacteristic<br ALIGN="LEFT"/>
get_entity(): EntityCharacteristic \| None<br ALIGN="LEFT"/>
get_period(): PeriodCharacteristic \| None<br ALIGN="LEFT"/>
get_unit(): UnitCharacteristic \| None<br ALIGN="LEFT"/>
has_characteristic(aspect: Aspect): bool<br ALIGN="LEFT"/>
}>, shape="record", style="solid"];
// "brel.reportelements.dimension.Dimension" [color="black", fontcolor="black", label=<{Dimension|<br ALIGN="LEFT"/>|get_labels(): list[BrelLabel]<br ALIGN="LEFT"/>get_name(): QName<br ALIGN="LEFT"/>get_type(): QName<br ALIGN="LEFT"/>is_explicit(): bool<br ALIGN="LEFT"/>make_typed(dim_type: QName)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
// "brel.characteristics.entity_characteristic.EntityCharacteristic" [color="black", fontcolor="black", label=<{EntityCharacteristic|<br ALIGN="LEFT"/>|get_aspect(): Aspect<br ALIGN="LEFT"/>get_schema(): str<br ALIGN="LEFT"/>get_value(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
// "brel.characteristics.explicit_dimension_characteristic.ExplicitDimensionCharacteristic" [color="black", fontcolor="black", label=<{ExplicitDimensionCharacteristic|<br ALIGN="LEFT"/>|get_aspect(): Aspect<br ALIGN="LEFT"/>get_dimension(): Dimension<br ALIGN="LEFT"/>get_member(): Member<br ALIGN="LEFT"/>get_value(): Member<br ALIGN="LEFT"/>}>, shape="record", style="solid"];

"brel.brel_fact.Fact" [color="black", fontcolor="black", label=<{
Fact
|
<br ALIGN="LEFT"/>
|
get_context(): Context<br ALIGN="LEFT"/>
get_value(): Any<br ALIGN="LEFT"/>
|
get_value_as_bool(): bool<br ALIGN="LEFT"/>
get_value_as_float(): float<br ALIGN="LEFT"/>
get_value_as_int(): int<br ALIGN="LEFT"/>
<I>get_value_as_qname</I>(): QName<br ALIGN="LEFT"/>
get_value_as_str(): str<br ALIGN="LEFT"/>
}>, shape="record", style="solid"];

"brel.brel_filing.Filing" [color="black", fontcolor="black", label=<{
Filing
|
<br ALIGN="LEFT"/>
|
open(path): 'Filing'<br ALIGN="LEFT"/>
get_all_facts(): list[Fact]<br ALIGN="LEFT"/>
get_all_components(): list[Component]<br ALIGN="LEFT"/>
get_all_physical_networks(): list[INetwork]<br ALIGN="LEFT"/>
get_all_report_elements(): list[IReportElement]<br ALIGN="LEFT"/>
|
get_all_reported_concepts(): list[Concept]<br ALIGN="LEFT"/>
get_component(uri: str): Component \| None<br ALIGN="LEFT"/>
get_concept(concept_qname: QName \| str): Concept \| None<br ALIGN="LEFT"/>
get_concept_by_name(concept_qname: QName \| str): Concept \| None<br ALIGN="LEFT"/>
get_facts_by_concept(concept: Concept): list[Fact]<br ALIGN="LEFT"/>
}>, shape="record", style="solid"];
// "brel.brel_filing_filter.FilingFilter" [color="black", fontcolor="black", label=<{FilingFilter|<br ALIGN="LEFT"/>|filter(other: list[Fact]): list[Fact]<br ALIGN="LEFT"/>get_filter_list(): list[bool]<br ALIGN="LEFT"/>get_filter_type(): FilingFilterType<br ALIGN="LEFT"/>make_aspect_filter(facts: list[Fact], aspect: Aspect, nsmap: QNameNSMap): 'FilingFilter'<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
// "brel.brel_filing_filter.FilingFilterType" [color="black", fontcolor="black", label=<{FilingFilterType|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
// "brel.reportelements.hypercube.Hypercube" [color="black", fontcolor="black", label=<{Hypercube|<br ALIGN="LEFT"/>|get_labels(): list[BrelLabel]<br ALIGN="LEFT"/>get_name(): QName<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"brel.characteristics.i_characteristic.ICharacteristic" [color="black", fontcolor="black", label=<{
ICharacteristic
|
<br ALIGN="LEFT"/>
|
<I>get_aspect</I>(): Aspect<br ALIGN="LEFT"/>
<I>get_value</I>(): Any<br ALIGN="LEFT"/>
}>, shape="record", style="solid"];

"brel.networks.i_network.INetwork" [color="black", fontcolor="black", label=<{
INetwork
|
<br ALIGN="LEFT"/>
|
get_link_role(): str<br ALIGN="LEFT"/>
get_link_name(): QName<br ALIGN="LEFT"/>
get_roots(): list[INetworkNode]<br ALIGN="LEFT"/>
is_physical(): bool<br ALIGN="LEFT"/>
|
Helper functions:<br/>
get_all_nodes(): list[INetworkNode]<br ALIGN="LEFT"/>
get_arc_name(): QName \| None<br ALIGN="LEFT"/>
get_arc_roles(): list[str]<br ALIGN="LEFT"/>
get_root(): INetworkNode<br ALIGN="LEFT"/>
}>, shape="record", style="solid"];

// // // uncomment to here

// "brel.networks.i_network_node.INetworkNode" [color="black", fontcolor="black", label=<{INetworkNode|<br ALIGN="LEFT"/>|get_all_descendants(): list['INetworkNode']<br ALIGN="LEFT"/><I>get_arc_name</I>(): QName<br ALIGN="LEFT"/><I>get_arc_role</I>(): str<br ALIGN="LEFT"/><I>get_children</I>(): list['INetworkNode']<br ALIGN="LEFT"/><I>get_fact</I>(): Fact<br ALIGN="LEFT"/><I>get_link_name</I>(): QName<br ALIGN="LEFT"/><I>get_link_role</I>(): str<br ALIGN="LEFT"/><I>get_order</I>(): float<br ALIGN="LEFT"/><I>get_report_element</I>(): IReportElement<br ALIGN="LEFT"/><I>get_resource</I>(): IResource<br ALIGN="LEFT"/>is_leaf(): bool<br ALIGN="LEFT"/><I>points_to</I>(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
// "brel.reportelements.i_report_element.IReportElement" [color="black", fontcolor="black", label=<{IReportElement|<br ALIGN="LEFT"/>|<I>get_labels</I>(): list[BrelLabel]<br ALIGN="LEFT"/><I>get_name</I>(): QName<br ALIGN="LEFT"/>has_label_with_language(language: str): bool<br ALIGN="LEFT"/>has_label_with_role(label_role: str): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
// "brel.resource.i_resource.IResource" [color="black", fontcolor="black", label=<{IResource|<br ALIGN="LEFT"/>|<I>get_content</I>(): dict \| list \| str \| None<br ALIGN="LEFT"/><I>get_label</I>(): str<br ALIGN="LEFT"/><I>get_role</I>(): str \| None<br ALIGN="LEFT"/><I>get_title</I>(): str \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
// "brel.reportelements.lineitems.LineItems" [color="black", fontcolor="black", label=<{LineItems|<br ALIGN="LEFT"/>|get_labels(): list[BrelLabel]<br ALIGN="LEFT"/>get_name(): QName<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
// "brel.reportelements.member.Member" [color="black", fontcolor="black", label=<{Member|<br ALIGN="LEFT"/>|get_labels(): list[BrelLabel]<br ALIGN="LEFT"/>get_name(): QName<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
// "brel.characteristics.period_characteristic.PeriodCharacteristic" [color="black", fontcolor="black", label=<{PeriodCharacteristic|<br ALIGN="LEFT"/>|get_aspect(): Aspect<br ALIGN="LEFT"/>get_end_period(): datetime.date<br ALIGN="LEFT"/>get_instant_period(): datetime.date<br ALIGN="LEFT"/>get_start_period(): datetime.date<br ALIGN="LEFT"/>get_value(): 'PeriodCharacteristic'<br ALIGN="LEFT"/>is_instant(): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
// "brel.qname.QName" [color="black", fontcolor="black", label=<{QName|<br ALIGN="LEFT"/>|from_string(qname_string: str, nsmap: 'QNameNSMap'): 'QName'<br ALIGN="LEFT"/>get(): str<br ALIGN="LEFT"/>get_URL(): str<br ALIGN="LEFT"/>get_local_name(): str<br ALIGN="LEFT"/>get_nsmap(): 'QNameNSMap'<br ALIGN="LEFT"/>get_prefix(): str<br ALIGN="LEFT"/>is_str_qname(qname_string: str, nsmap: 'QNameNSMap'): bool<br ALIGN="LEFT"/>resolve(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
// "brel.qname.QNameNSMap" [color="black", fontcolor="black", label=<{QNameNSMap|<br ALIGN="LEFT"/>|add_redirect(redirect_from: str, redirect_to: str): None<br ALIGN="LEFT"/>add_to_nsmap(url: str, prefix: str): None<br ALIGN="LEFT"/>get_nsmap(): dict[str, str]<br ALIGN="LEFT"/>get_prefix(url: str): str \| None<br ALIGN="LEFT"/>get_redirect(redirect_from: str): str \| None<br ALIGN="LEFT"/>get_url(prefix: str): str \| None<br ALIGN="LEFT"/>rename(rename_uri: str, rename_prefix: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
// "brel.characteristics.typed_dimension_characteristic.TypedDimensionCharacteristic" [color="black", fontcolor="black", label=<{TypedDimensionCharacteristic|<br ALIGN="LEFT"/>|get_aspect(): Aspect<br ALIGN="LEFT"/>get_dimension(): Dimension<br ALIGN="LEFT"/>get_value(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
// "brel.characteristics.unit_characteristic.UnitCharacteristic" [color="black", fontcolor="black", label=<{UnitCharacteristic|<br ALIGN="LEFT"/>|get_aspect(): Aspect<br ALIGN="LEFT"/>get_denominators(): list[QName]<br ALIGN="LEFT"/>get_numerators(): list[QName]<br ALIGN="LEFT"/>get_value(): str<br ALIGN="LEFT"/>is_simple(): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
// "brel.characteristics.concept_characteristic.ConceptCharacteristic" -> "brel.characteristics.i_characteristic.ICharacteristic" [arrowhead="empty", arrowtail="none"];
// "brel.characteristics.entity_characteristic.EntityCharacteristic" -> "brel.characteristics.i_characteristic.ICharacteristic" [arrowhead="empty", arrowtail="none"];
// "brel.characteristics.explicit_dimension_characteristic.ExplicitDimensionCharacteristic" -> "brel.characteristics.i_characteristic.ICharacteristic" [arrowhead="empty", arrowtail="none"];
// "brel.characteristics.period_characteristic.PeriodCharacteristic" -> "brel.characteristics.i_characteristic.ICharacteristic" [arrowhead="empty", arrowtail="none"];
// "brel.characteristics.typed_dimension_characteristic.TypedDimensionCharacteristic" -> "brel.characteristics.i_characteristic.ICharacteristic" [arrowhead="empty", arrowtail="none"];
// "brel.characteristics.unit_characteristic.UnitCharacteristic" -> "brel.characteristics.i_characteristic.ICharacteristic" [arrowhead="empty", arrowtail="none"];
// "brel.reportelements.abstract.Abstract" -> "brel.reportelements.i_report_element.IReportElement" [arrowhead="empty", arrowtail="none"];
// "brel.reportelements.concept.Concept" -> "brel.reportelements.i_report_element.IReportElement" [arrowhead="empty", arrowtail="none"];
// "brel.reportelements.dimension.Dimension" -> "brel.reportelements.i_report_element.IReportElement" [arrowhead="empty", arrowtail="none"];
// "brel.reportelements.hypercube.Hypercube" -> "brel.reportelements.i_report_element.IReportElement" [arrowhead="empty", arrowtail="none"];
// "brel.reportelements.lineitems.LineItems" -> "brel.reportelements.i_report_element.IReportElement" [arrowhead="empty", arrowtail="none"];
// "brel.reportelements.member.Member" -> "brel.reportelements.i_report_element.IReportElement" [arrowhead="empty", arrowtail="none"];
// "brel.brel_context.Context" -> "brel.brel_fact.Fact" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__context", style="solid"];
// "brel.brel_filing_filter.FilingFilterType" -> "brel.brel_filing_filter.FilingFilter" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__filter_type", style="solid"];
// "brel.characteristics.brel_aspect.Aspect" -> "brel.characteristics.explicit_dimension_characteristic.ExplicitDimensionCharacteristic" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__aspect", style="solid"];
// "brel.characteristics.brel_aspect.Aspect" -> "brel.characteristics.typed_dimension_characteristic.TypedDimensionCharacteristic" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__aspect", style="solid"];
// "brel.qname.QName" -> "brel.networks.i_network.INetwork" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__link_name", style="solid"];
// "brel.qname.QName" -> "brel.reportelements.abstract.Abstract" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__qname", style="solid"];
// "brel.qname.QName" -> "brel.reportelements.concept.Concept" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__name", style="solid"];
// "brel.qname.QName" -> "brel.reportelements.dimension.Dimension" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__name", style="solid"];
// "brel.qname.QName" -> "brel.reportelements.dimension.Dimension" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__type", style="solid"];
// "brel.qname.QName" -> "brel.reportelements.hypercube.Hypercube" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__name", style="solid"];
// "brel.qname.QName" -> "brel.reportelements.lineitems.LineItems" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__name", style="solid"];
// "brel.qname.QName" -> "brel.reportelements.member.Member" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__name", style="solid"];
// "brel.qname.QNameNSMap" -> "brel.brel_filing_filter.FilingFilter" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__nsmap", style="solid"];
// "brel.reportelements.concept.Concept" -> "brel.characteristics.concept_characteristic.ConceptCharacteristic" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__concept", style="solid"];
// "brel.reportelements.dimension.Dimension" -> "brel.characteristics.explicit_dimension_characteristic.ExplicitDimensionCharacteristic" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__dimension", style="solid"];
// "brel.reportelements.dimension.Dimension" -> "brel.characteristics.typed_dimension_characteristic.TypedDimensionCharacteristic" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__dimension", style="solid"];
// "brel.reportelements.member.Member" -> "brel.characteristics.explicit_dimension_characteristic.ExplicitDimensionCharacteristic" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__member", style="solid"];

// Add a solid odiamond fact edge from fact to filing. make label="1:1"
"brel.brel_fact.Fact" -> "brel.brel_filing.Filing" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="1:1", style="solid"];

// Add a solid odiamond edge from context to fact. make label="1:1" 
"brel.brel_context.Context" -> "brel.brel_fact.Fact" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="1:1", style="solid"];

// Add a solid odiamond edge from icharacteristic to context. make label="1:n"
"brel.characteristics.i_characteristic.ICharacteristic" -> "brel.brel_context.Context" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="1:n", style="solid"];

// Make both edges odiamond
// aspect -> icharacteristic and aspect -> context
// the icharacteristic edge is 1:1, the context edge is 1:n
"brel.characteristics.brel_aspect.Aspect" -> "brel.characteristics.i_characteristic.ICharacteristic" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="1:1", style="solid"];
"brel.characteristics.brel_aspect.Aspect" -> "brel.brel_context.Context" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="1:n", style="solid"];

// Add an edge from component to filing. same style as fact to filing
"brel.brel_component.Component" -> "brel.brel_filing.Filing" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="1:1", style="solid"];

// Add edges network -> filing and network -> component
// both edges are 1:n
"brel.networks.i_network.INetwork" -> "brel.brel_filing.Filing" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="1:n", style="solid"];
"brel.networks.i_network.INetwork" -> "brel.brel_component.Component" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="1:n", style="solid"];


}
